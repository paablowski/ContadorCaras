# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `Contador.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if '_t_array' not in _M_Demo.__dict__:
    _M_Demo._t_array = IcePy.defineSequence('::Demo::array', (), IcePy._t_byte)

_M_Demo._t_Contador = IcePy.defineValue('::Demo::Contador', Ice.Value, -1, (), False, True, None, ())

if 'ContadorPrx' not in _M_Demo.__dict__:
    _M_Demo.ContadorPrx = Ice.createTempClass()
    class ContadorPrx(Ice.ObjectPrx):

        def contarCaras(self, a, context=None):
            return _M_Demo.Contador._op_contarCaras.invoke(self, ((a, ), context))

        def contarCarasAsync(self, a, context=None):
            return _M_Demo.Contador._op_contarCaras.invokeAsync(self, ((a, ), context))

        def begin_contarCaras(self, a, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.Contador._op_contarCaras.begin(self, ((a, ), _response, _ex, _sent, context))

        def end_contarCaras(self, _r):
            return _M_Demo.Contador._op_contarCaras.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.ContadorPrx.ice_checkedCast(proxy, '::Demo::Contador', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.ContadorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::Contador'
    _M_Demo._t_ContadorPrx = IcePy.defineProxy('::Demo::Contador', ContadorPrx)

    _M_Demo.ContadorPrx = ContadorPrx
    del ContadorPrx

    _M_Demo.Contador = Ice.createTempClass()
    class Contador(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::Contador', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Contador'

        @staticmethod
        def ice_staticId():
            return '::Demo::Contador'

        def contarCaras(self, a, current=None):
            raise NotImplementedError("servant method 'contarCaras' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_ContadorDisp)

        __repr__ = __str__

    _M_Demo._t_ContadorDisp = IcePy.defineClass('::Demo::Contador', Contador, (), None, ())
    Contador._ice_type = _M_Demo._t_ContadorDisp

    Contador._op_contarCaras = IcePy.Operation('contarCaras', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Demo._t_array, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_Demo.Contador = Contador
    del Contador

# End of module Demo
